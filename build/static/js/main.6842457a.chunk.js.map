{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","qrRef","useRef","React","data","setData","generateQrCode","a","QRCode","toDataURL","response","console","log","Container","Card","width","height","onUpdate","err","result","onCode","code","type","name","accept","capture","CardContent","Grid","container","spacing","item","xl","lg","md","sm","xs","TextField","label","onChange","e","target","value","Button","variant","color","onClick","href","download","src","alt","current","openImageDialog","ref","delay","style","onError","error","onScan","legacyMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6842457a.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\nimport {Container, Card, CardContent,  Grid, TextField, Button} from '@mui/material';\n//import {makeStyles,} from '@mui/material/';\nimport QRCode from 'qrcode';\nimport QrReader from 'react-qr-reader';\n//import QRScan from 'qrscan';\nimport ReactiveQR from \"reactive-qr\";\n//import QrCodeScanner from '@sensorfactdev/qr-code-scanner';\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\n\n\n\nfunction App() { \n  const [text, setText] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [scanResultFile, setScanResultFile] = useState('');\n  const [scanResultWebCam, setScanResultWebCam] =  useState('');\n  //const classes = useStyles();\n  const qrRef = useRef(null);\n\n  const [data, setData] = React.useState(\"Not Found\");\n  \n\n  const handleScanResult = result => {\n    console.log(result);\n  }\n  const generateQrCode = async () => {\n    try {\n          const response = await QRCode.toDataURL(text);\n          setImageUrl(response);\n    }catch (error) {\n      console.log(error);\n    }\n  }\n  const handleErrorFile = (error) => {\n    console.log(error);\n  }\n  const handleScanFile = (result) => {\n      if (result) {\n          setScanResultFile(result);\n      }\n  }\n  const onScanFile = () => {\n    qrRef.current.openImageDialog();\n  }\n  const handleErrorWebCam = (error) => {\n    console.log(error);\n  }\n  const handleScanWebCam = (result) => {\n    if (result){\n        setScanResultWebCam(result);\n    }\n   }\n  return (\n    <Container >\n          <Card>\n\n          <BarcodeScannerComponent\n        width={500}\n        height={500}\n        onUpdate={(err, result) => {\n          if (result) setData(result.text);\n          else setData(\"Not Found\");\n        }}\n      />\n      <p>{data}</p>\n\n              <ReactiveQR onCode={code => console.log(code)} />  \n              <h2 >Generate Download & Scan QR Code with React js</h2>\n              <input type=\"file\" name=\"image\" accept=\"image/*\" capture=\"environment\" />\n\n              <input type=\"file\" name=\"image\" accept=\"image/*\" capture=\"user\" />\n\n              <CardContent>\n                  <Grid container spacing={2}>\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                          <TextField label=\"Enter Text Here\" onChange={(e) => setText(e.target.value)}/>\n                          <Button  variant=\"contained\" \n                            color=\"primary\" onClick={() => generateQrCode()}>Generate</Button>\n                            <br/>\n                            <br/>\n                            <br/>\n                            {imageUrl ? (\n                              <a href={imageUrl} download>\n                                  <img src={imageUrl} alt=\"img\"/>\n                              </a>) : null}\n                      </Grid>\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                        <Button  variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Code</Button>\n                        <QrReader\n                          ref={qrRef}\n                          delay={300}\n                          style={{width: '100%'}}\n                          onError={handleErrorFile}\n                          onScan={handleScanFile}\n                          legacyMode\n                        />\n                        <h3>Scanned Code: {scanResultFile}</h3>\n                      </Grid>\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                         <h3>Qr Code Scan by Web Cam</h3>\n                         <QrReader\n                         delay={300}\n                         style={{width: '100%'}}\n                         onError={handleErrorWebCam}\n                         onScan={handleScanWebCam}\n                         />\n                         <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\n                      </Grid>\n                  </Grid>\n              </CardContent>\n          </Card>\n    </Container>\n  );\n}\n\n/* const useStyles = makeStyles((theme) => ({\n    conatiner: {\n      marginTop: 10\n    },\n    title: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems:  'center',\n      background: '#3f51b5',\n      color: '#fff',\n      padding: 20\n    },\n    btn : {\n      marginTop: 10,\n      marginBottom: 20\n    }\n})); */\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}